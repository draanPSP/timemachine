#ifndef TM_TABLEHASH
#define TM_TABLEHASH

#include <cstdint>

//Key table from https://github.com/John-K/pspdecrypt/blob/master/ipl_decrypt.cpp

typedef struct {
	std::uint32_t idx;
	std::uint32_t key[8];
} KeyEntry;

const KeyEntry g_KeyTable[] = {
	{0x3ca104f4,	0x351934f6, 0x7c77b627, 0xc774d96b, 0xac1381ef, 0xa93ba068, 0x9bf7a518, 0xd7e040e4, 0x41d18c07}, // 2.60
	{0x3f0449dd,	0x941a62b7, 0xa8b33d7e, 0xf59f3d90, 0xbfe0a24d, 0x295206e9, 0xe8d280fa, 0xb705572a, 0x99ad3262}, // 2.7x
	{0xfcc312e8,	0x4ebb9a84, 0x9d5b13a5, 0x569beec5, 0x343d4264, 0x2b3896dd, 0x00c962d8, 0x09fca971, 0x6aa5bcff}, // 2.8x
	{0x73acd410,	0xa06c226a, 0x3aee5334, 0x580f1057, 0x8a54f529, 0x1f4baece, 0xfa1d193e, 0x8ebb3a3c, 0x9e71ebfe}, // 3.0x
	{0x09cad2e0,	0x3311ea3a, 0xabc9231f, 0xdc31a4ec, 0x854344a5, 0x3c4ab211, 0x3db9632c, 0xbffe001b, 0xe4cd2a5b}, // 3.1x
	{0x59240761,	0x7c88b8f4, 0xf37ac9f8, 0xcedd8523, 0x1ed52bb3, 0xe02a117b, 0xad733c35, 0x34e7d318, 0x96434aac}, // 3.30, 3.40
	{0x3223e3dd,	0x3ff5e39a, 0x6f09bd05, 0xeb912e7f, 0xdf288223, 0xede00faa, 0x2187f747, 0x1e05d1e7, 0xbc699822}, // 3.5x
	{0x5abf5a5a,	0xa75ea149, 0xdf80643c, 0x8b15a788, 0xb1bf79db, 0x75782efd, 0x77432695, 0x1b26fdb2, 0x2cff77bd}, // 3.60 02g
	{0xbf94b233,	0xbe73e05c, 0xde908e11, 0xa08ec1df, 0xd52c8f15, 0x85cf2ad7, 0x16c21b33, 0x2c0e43e8, 0x084742b2}, // 3.7x 01g
	{0xc93aaf8e,	0x678ff79a, 0xa6a3e8cf, 0xa3440e80, 0xbfe1a980, 0x1734fb62, 0x8c8dcf35, 0x4b0443fd, 0xd4ecf146}, // 3.7x 02g
	{0xda8611e4,	0xfb9f9a86, 0x8dec7ddc, 0xb32215f0, 0x5e7be11f, 0xa6a140d7, 0xff068276, 0x2b2ee6e1, 0x00000000}, // 3.80, 3.90, 3.93 01g
	{0x0bb77011,	0xf4710af6, 0x46a34052, 0xdef91911, 0x29afe7d7, 0xc7fc1e55, 0xd0838eb1, 0xe069efd4, 0x00000000}, // 3.80, 3.90, 3.93 02g
	{0x8f94e800,	0xe359cf7e, 0x0c497ceb, 0x5ddf77c8, 0xf9bd7557, 0x00f4c84e, 0xe8b8bb30, 0x9417a01f, 0x00000000}, // 3.95, 3.96, 4.0x 01g
	{0x835f216c,	0xbd44491e, 0x2846ad03, 0x8ab0052e, 0x800e913b, 0x311ac562, 0x164bcb2c, 0x47791324, 0x00000000}, // 3.95, 3.96, 4.0x 02g
	{0x1605b947,	0x103e2ed1, 0x77a7c0d0, 0x66793d55, 0x48a1aa46, 0x8f08df6d, 0x9b18090b, 0x748538dd, 0x00000000}, // 4.21 03g
	{0xf6d67166,	0xc9d132c6, 0x39bf60aa, 0x1e0beb42, 0x2527c8aa, 0xee9568c7, 0xc1e9c001, 0xe12d8a28, 0x00000000}, // 5.00, 5.01, 5.02, 5.03 01g
	{0x1d3b3e5c,	0x0bdc608a, 0xb798378c, 0xd7685fca, 0x2eff316c, 0x360b71bd, 0x54cf987b, 0xa33e199f, 0x00000000}, // 5.00, 5.01, 5.02, 5.03 02g
	{0xdaaed916,	0xb66b5ed0, 0x6050ffe7, 0x05d943de, 0x740c00b3, 0xe3162c25, 0x10e84f28, 0x08fb61e5, 0x00000000}, // 5.00, 5.01, 5.02, 5.03 03g
	{0x3c5001d1,	0xc875123f, 0x91729205, 0x3ecf796e, 0xe4d1ed01, 0xb4a21262, 0xe2393966, 0x652c02a0, 0x00000000}, // 5.05, 5.50, 5.51 01g
	{0x34da9f9e,	0xd5598f66, 0x76563204, 0xd7609af3, 0x19e3fdfd, 0x59423449, 0x51f66969, 0x7491d7c7, 0x00000000}, // 5.05, 5.50, 5.51 02g
	{0xade7c30d,	0x7f363521, 0x1310b36f, 0x6ac47b4d, 0x70f691ac, 0xa5aeb931, 0x77a0e03d, 0xdd4fba79, 0x00000000}, // 5.05, 5.50, 5.51 03g
	{0xdd076132,	0xba731b75, 0xcc82b010, 0xeb35b72f, 0xcc228644, 0x56d6ba1e, 0x0d53c995, 0x988869a6, 0x00000000}, // 5.55 01g
	{0x03860456,	0xa35e7406, 0x8f85a45c, 0x73da7972, 0x2b231cda, 0x0352d13b, 0x1a5a0926, 0x86e6b2aa, 0x00000000}, // 5.55 02g
	{0x4bcf9cd3,	0xd03eb41a, 0xa5cf5395, 0x13fe9bd2, 0x0eb708e4, 0xf6836b3d, 0xb9f0fcb8, 0x9ddf3756, 0x00000000}, // 5.55 03g
	{0x1e4deaad,	0x969e578c, 0xd177ecbd, 0x8ace8ccf, 0xf0ea87f0, 0x34176e61, 0xdd680510, 0x6f6455ce, 0x00000000}, // 5.70 04g
	{0x2ee36b15,	0xff9c66bf, 0x37dd4762, 0x9c86545f, 0xf0c04791, 0x9550728c, 0x92233d0d, 0x97995f06, 0x00000000}, // 5.70 05g
	{0xbd0cd90b,	0xaa80ca25, 0x8686d001, 0x2af2ed65, 0x77b0ca3a, 0xb608924f, 0x8454d567, 0xfb1a3e15, 0x00000000}, // 6.00, 6.10, 6.20 01g
	{0x66e25e99,	0xd7af4f1e, 0x7cac691f, 0xc45ddbc2, 0x80c62fbf, 0x74928262, 0x36adec73, 0x9f38dbe9, 0x00000000}, // 6.00, 6.10, 6.20 02g
	{0x791e4cd7,	0xcb69b76f, 0x6aba2c7f, 0xb808770e, 0xaddf932a, 0xb07ebfac, 0x447c43b3, 0x4cc9ce7d, 0x00000000}, // 6.00, 6.10, 6.20 03g
	{0xa24e1fa2,	0x93c4833f, 0x76a42f6b, 0x005a7db5, 0xb2449bd6, 0x085cea84, 0x987d971d, 0xe3a38f0c, 0x00000000}, // 6.00, 6.10, 6.20 04g
	{0x0efa302b,	0xb886fa46, 0xbf9132f4, 0x84fd77aa, 0x9dc7f006, 0x43f3d726, 0x3fa9e3eb, 0x7fa1af0c, 0x00000000}, // 6.10, 6.20 05g
	{0xdf2909ba,	0xcd9c739f, 0x5077f132, 0x64079858, 0x01890036, 0x18bda892, 0xc31afe19, 0x309d6b46, 0x00000000}, // 6.3x 01g
	{0x545f427d,	0x1039fa9d, 0x4dbb2c77, 0x85c4f2c2, 0x51603084, 0x45190185, 0x0dea4d7d, 0x9c2853b8, 0x00000000}, // 6.3x 02g
	{0x6bb07a45,	0x70c01e9f, 0x8614069e, 0xa7cf50ab, 0xf9fe95c4, 0xe082ba29, 0x13bb2928, 0x06f2c942, 0x00000000}, // 6.3x 03g
	{0x64a6dae0,	0xc45a66f3, 0xf4d20f59, 0x9dff1533, 0xe50dbcfa, 0x9dd4487a, 0x00ec7c4c, 0xe69ff0a2, 0x00000000}, // 6.3x 04g
	{0x70fa83f7,	0xb49b59cb, 0xd238f8b4, 0xc9fe7e77, 0xf7fdbb24, 0xb27cf247, 0x06b29fea, 0x0aada68d, 0x00000000}, // 6.3x 05g
	{0xe63cebfd,	0x051adf5d, 0xd72a2c71, 0x04626b68, 0x8d5d6c2a, 0x696eb66a, 0x7d11b562, 0xdc7bb632, 0x00000000}, // 6.3x 07g
	{0x15dd2454,	0xa3bd8761, 0x30566a13, 0x65cbf6a1, 0x4464c734, 0x0f3895a3, 0xfde2bf31, 0x5940c10d, 0x00000000}, // 6.3x 09g
	{0x5eb2f991,	0x5ccf8527, 0x2ff4adbb, 0x90c4a5ff, 0x64a5a0b3, 0xe2db29d9, 0x4a3507db, 0x51cf76e7, 0x00000000}, // 6.6x 01g
	{0xfeadb708,	0x54db38ee, 0x84cfaea2, 0xf85925fb, 0xcba099a5, 0x9292dfab, 0xffa59b39, 0x5db31507, 0x00000000}, // 6.6x 02g
	{0x2d626d63,	0x882ff548, 0x3a24be5f, 0x850119d3, 0x0bb04220, 0x558f2a63, 0x619da517, 0x150eacf1, 0x00000000}, // 6.6x 03g
	{0x0560f424,	0x65a4369e, 0x48d33702, 0x4ad997f6, 0xfbd71fa5, 0x47cd9b75, 0xf39e4dbe, 0xae53ee25, 0x00000000}, // 6.6x 04g
	{0x56b30c99,	0x6be11e81, 0x2be616ac, 0xd1b3c7d3, 0xd1c7b01e, 0x28a657a6, 0x1667269f, 0xda03c4ba, 0x00000000}, // 6.6x 05g
	{0xcf87c10b,	0x9eebba33, 0x7de3efcf, 0xe38c189c, 0x61974726, 0x75ca3035, 0xcdca66b9, 0xfc094e35, 0x00000000}, // 6.6x 07g
	{0xd2334cee,	0x87193122, 0x39e8c388, 0x9bfa9cab, 0x979a9058, 0x3d12704c, 0x4d528bd9, 0x137d2e31, 0x00000000}, // 6.6x 09g
	{0x1bba5ad4,	0x7f093ad4, 0x75b52e02, 0x20c1be3d, 0xc3204b93, 0x9788fcd0, 0xae5cacdc, 0x1eef8956, 0x00000000}, // 6.6x 11g
	{0xb189b51f,	0xd0f4ce57, 0xdab147d0, 0xa074dd43, 0xbf611bd7, 0x2a63d331, 0x838fa853, 0x145e39af, 0x00000000}, // 6.00, 6.20 testing tool
	{0xa8adc5c2,	0xc2808a14, 0x0b449fb7, 0x7b2c7edc, 0xa81dc907, 0x99206828, 0xe3a76c7d, 0xa410c092, 0x00000000}, // 6.39 testing tool
	{0xb331d7a6,	0x0163e80e, 0x3175e31e, 0xe5134ea3, 0x03d1bb84, 0x49cd898d, 0x41f3047a, 0x7de563d1, 0x00000000}  // 6.60 testing tool
};

constexpr inline std::uint32_t HASH_ROWS = sizeof(g_KeyTable)/sizeof(g_KeyTable[0]);

#endif //TM_TABLEHASH